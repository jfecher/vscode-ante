{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ante",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#types"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#preprocs"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ante",
					"match": "\\b(if|elif|else|import|with|in|do|try|given|as|mut|can|where|effect|handle|resume|return|is|fn|opaque|impl|match|trait|module|recur|type|and|loop|do|then|not|or)\\b"
				},
				{
					"match": "\\b([a-z_][a-z_A-Z0-9]*|(\\(.+\\))) +((([a-z_]\\w*)|([A-Z']\\w*)|(\\(([a-z_]\\w*)(:)(.*)\\))|(([a-z_]\\w*)(:)(('|\\w)+))|(\\([a-zA-Z_0-9 '.]*\\))|(...)) +)+ *(=|(->))",
                    "captures":{
                        "1": {
                            "name": "entity.name.function.ante"
                        },
                        "5": {
                            "name": "variable.parameter.ante"
                        },
                        "6": {
                            "name": "entity.name.type.ante"
                        },
                        "8": {
                            "name": "variable.parameter.ante"
                        },
                        "9": {
                            "name": "keyword.control.ante"
                        },
                        "10": {
                            "name": "entity.name.type.ante"
                        },
                        "12": {
                            "name": "variable.parameter.ante"
                        },
                        "13": {
                            "name": "keyword.control.ante"
                        },
                        "14": {
                            "name": "entity.name.type.ante"
                        },
                        "16": {
                            "name": "entity.name.type.ante"
                        },
                        "17": {
                            "name": "keyword.control.ante"
                        },
                        "18": {
                            "name": "keyword.control.ante"
                        }
                    }
				}
			]
		},
		"comments": {
			"patterns":[
				{
					"name": "comment.line.ante",
					"match": "//.*$"
				},
				{
					"name": "comment.block.ante",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.ante",
					"match": "[+\\-*/%\\^:|#&=<>!]"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "entity.name.type.ante",
					"match": "\\b(i8|i16|i32|i64|isz|u8|u16|u32|u64|usz|f16|f32|f64|char|unit|bool|ref|string)\\b"
				},
				{
					"name": "entity.name.type.ante",
					"match": "\\b[A-Z]\\w*\\b"
				},
				{
					"name": "entity.name.type.ante",
					"match": "'[a-z_]\\w*\\b"
				}
			]
		},
		"preprocs": {
			"patterns": [
				{
					"name": "keyword.control.ante",
					"match": "![a-z_]\\w*"
				},
				{
					"name": "keyword.control.ante",
					"begin": "!\\[",
					"end": "]",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#literals"
						},
						{
							"include": "#types"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#operators"
						}
					]
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.numeric.ante",
					"match": "\\b[0-9_]+([ui](8|16|32|64|sz))?\\b"
				},
				{
					"name": "constant.numeric.ante",
					"match": "\\b0b[01_]+([ui](8|16|32|64|sz))?\\b"
				},
				{
					"name": "constant.numeric.ante",
					"match": "\\b0o[0-7_]+([ui](8|16|32|64|sz))?\\b"
				},
				{
					"name": "constant.numeric.ante",
					"match": "\\b0x[0-9A-Fa-f_]+([ui](8|16|32|64|sz))?\\b"
				},
				{
					"name": "constant.other.ante",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.character.ante",
					"match": "'.'"
				},
				{
					"name": "constant.character.escape.ante",
					"match": "'\\\\([abfnrtv]|([0-9]+))'"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ante",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ante",
					"match": "\\\\([abfnrtv]|([0-9]+))"
				}
			]
		}
	},
	"scopeName": "source.ante"
}
